/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mybank;

import mybank.domain.Account;
import mybank.domain.Bank;
import mybank.domain.CheckingAccount;
import mybank.domain.Customer;
import mybank.domain.SavingsAccount;

/**
 *
 * @author sviat
 */
public class main extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(main.class.getName());
    private Bank bank;
    private java.util.List<Customer> customers;

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        loadBankData();
    }

    private void loadBankData() {
        try {
            bank = Bank.getBank();
            customers = new java.util.ArrayList<>();
            
            try (java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.FileReader("src/mybank/test.dat"))) {
                int numCustomers = Integer.parseInt(reader.readLine().trim());
                
                for (int i = 0; i < numCustomers; i++) {
                    String line;
                    String[] customerInfo;
                    // Skip blank or invalid lines
                    while (true) {
                        line = reader.readLine();
                        if (line == null) throw new Exception("Unexpected end of file");
                        line = line.trim();
                        if (!line.isEmpty()) {
                            customerInfo = line.split("\t");
                            if (customerInfo.length == 3) break;
                        }
                    }
                    String firstName = customerInfo[0];
                    String lastName = customerInfo[1];
                    int numAccounts = Integer.parseInt(customerInfo[2]);
                    
                    bank.addCustomer(firstName, lastName);
                    Customer customer = bank.getCustomer(i);
                    customers.add(customer);
                    
                    for (int j = 0; j < numAccounts; j++) {
                        String[] accountInfo;
                        // Skip blank or invalid lines
                        while (true) {
                            line = reader.readLine();
                            if (line == null) throw new Exception("Unexpected end of file");
                            line = line.trim();
                            if (!line.isEmpty()) {
                                accountInfo = line.split("\t");
                                if (accountInfo.length == 3) break;
                            }
                        }
                        String accountType = accountInfo[0];
                        double balance = Double.parseDouble(accountInfo[1]);
                        double rateOrOverdraft = Double.parseDouble(accountInfo[2]);
                        
                        if (accountType.equals("S")) {
                            customer.addAccount(new SavingsAccount(balance, rateOrOverdraft));
                        } else if (accountType.equals("C")) {
                            customer.addAccount(new CheckingAccount(balance, rateOrOverdraft));
                        }
                    }
                }
            }
            
            // Update combo box with customer names
            String[] customerNames = customers.stream()
                .map(c -> c.getFirstName() + " " + c.getLastName())
                .toArray(String[]::new);
            jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(customerNames));
            
        } catch (Exception ex) {
            logger.log(java.util.logging.Level.SEVERE, "Error loading bank data", ex);
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Error loading bank data: " + ex.getMessage(),
                "Error",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyBank Clients");
        setResizable(false);

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Show");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Report");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("About");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField1.setText("Choose a client name and press \"Show\" button");
        jTextField1.setEnabled(false);

        jButton4.setText("Deposit");
        jButton4.setPreferredSize(new java.awt.Dimension(72, 24));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Withdraw");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Saving", "Checking" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedIndex = jComboBox1.getSelectedIndex();
        if (selectedIndex >= 0 && selectedIndex < customers.size()) {
            Customer customer = customers.get(selectedIndex);
            StringBuilder info = new StringBuilder();
            info.append(customer.getFirstName()).append(" ").append(customer.getLastName())
                .append(", Customer #").append(selectedIndex + 1)
                .append("\n-----------------------------------\nAccounts:\n");
            
            for (int i = 0; i < customer.getNumberOfAccounts(); i++) {
                Account account = customer.getAccount(i);
                info.append("#").append(i).append(" - ");
                switch (account) {
                    case SavingsAccount sa -> info.append("Saving: $").append(String.format("%.2f", sa.getBalance()))
                            .append(", interest rate: ").append(String.format("%.0f", sa.getInterestRate() * 100)).append("%");
                    case CheckingAccount ca -> info.append("Checking: $").append(String.format("%.2f", ca.getBalance()))
                            .append(", overdraft: $").append(String.format("%.2f", ca.getOverdraftAmount()));
                    default -> {
                    }
                }
                info.append("\n");
            }
            jTextArea1.setText(info.toString());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        StringBuilder report = new StringBuilder();
        report.append("CUSTOMERS REPORT\n");
        report.append("===============\n\n");
        
        for (int i = 0; i < customers.size(); i++) {
            Customer customer = customers.get(i);
            report.append("Customer #").append(i + 1).append(": ")
                  .append(customer.getFirstName()).append(" ").append(customer.getLastName())
                  .append("\n-----------------------------------\n");
            
            for (int j = 0; j < customer.getNumberOfAccounts(); j++) {
                Account account = customer.getAccount(j);
                report.append("Account #").append(j).append(": ");
                switch (account) {
                    case SavingsAccount sa -> report.append("Savings Account\n")
                            .append("  Balance: $").append(String.format("%.2f", sa.getBalance())).append("\n")
                            .append("  Interest Rate: ").append(String.format("%.0f", sa.getInterestRate() * 100)).append("%\n");
                    case CheckingAccount ca -> report.append("Checking Account\n")
                            .append("  Balance: $").append(String.format("%.2f", ca.getBalance())).append("\n")
                            .append("  Overdraft Protection: $").append(String.format("%.2f", ca.getOverdraftAmount())).append("\n");
                    default -> {
                    }
                }
                report.append("\n");
            }
            report.append("\n");
        }
        
        jTextArea1.setText(report.toString());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        javax.swing.JOptionPane.showMessageDialog(this, """
                                                        MyBank Client Management System
                                                        
                                                        Developed by: Sviatoslav Kalinichuk
                                                        Version: 1.0
                                                        
                                                        This application allows you to manage bank customers and their accounts.""",
            "About MyBank",
            javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int selectedCustomerIndex = jComboBox1.getSelectedIndex();
        if (selectedCustomerIndex < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a customer first", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        Customer customer = customers.get(selectedCustomerIndex);
        if (customer.getNumberOfAccounts() == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Selected customer has no accounts", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        String selectedType = (String) jComboBox2.getSelectedItem();
        Account targetAccount = null;
        
        // Find the first account of the selected type
        for (int i = 0; i < customer.getNumberOfAccounts(); i++) {
            Account account = customer.getAccount(i);
            if ((selectedType.equals("Saving") && account instanceof SavingsAccount) ||
                (selectedType.equals("Checking") && account instanceof CheckingAccount)) {
                targetAccount = account;
                break;
            }
        }

        if (targetAccount == null) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Selected customer has no " + selectedType.toLowerCase() + " account", 
                "Error", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = javax.swing.JOptionPane.showInputDialog(this, "Enter amount to deposit:", "Deposit", javax.swing.JOptionPane.QUESTION_MESSAGE);
        if (amountStr == null) return; // User cancelled

        try {
            double amount = Double.parseDouble(amountStr);
            if (amount <= 0) {
                throw new NumberFormatException("Amount must be positive");
            }

            targetAccount.deposit(amount);
            jTextArea1.setText("Deposit successful. New balance: $" + String.format("%.2f", targetAccount.getBalance()));
        } catch (NumberFormatException ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid amount. Please enter a positive number.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int selectedCustomerIndex = jComboBox1.getSelectedIndex();
        if (selectedCustomerIndex < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a customer first", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        Customer customer = customers.get(selectedCustomerIndex);
        if (customer.getNumberOfAccounts() == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Selected customer has no accounts", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        String selectedType = (String) jComboBox2.getSelectedItem();
        Account targetAccount = null;
        
        // Find the first account of the selected type
        for (int i = 0; i < customer.getNumberOfAccounts(); i++) {
            Account account = customer.getAccount(i);
            if ((selectedType.equals("Saving") && account instanceof SavingsAccount) ||
                (selectedType.equals("Checking") && account instanceof CheckingAccount)) {
                targetAccount = account;
                break;
            }
        }

        if (targetAccount == null) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Selected customer has no " + selectedType.toLowerCase() + " account", 
                "Error", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountStr = javax.swing.JOptionPane.showInputDialog(this, "Enter amount to withdraw:", "Withdraw", javax.swing.JOptionPane.QUESTION_MESSAGE);
        if (amountStr == null) return; // User cancelled

        try {
            double amount = Double.parseDouble(amountStr);
            if (amount <= 0) {
                throw new NumberFormatException("Amount must be positive");
            }

            // Debug information
            StringBuilder debugInfo = new StringBuilder();
            debugInfo.append("Account Type: ").append(selectedType).append("\n");
            debugInfo.append("Current Balance: $").append(String.format("%.2f", targetAccount.getBalance())).append("\n");
            
            if (targetAccount instanceof CheckingAccount ca) {
                debugInfo.append("Overdraft Protection: $").append(String.format("%.2f", ca.getOverdraftAmount())).append("\n");
                debugInfo.append("Total Available: $").append(String.format("%.2f", targetAccount.getBalance() + ca.getOverdraftAmount())).append("\n");
            }
            
            debugInfo.append("Withdrawal Amount: $").append(String.format("%.2f", amount)).append("\n");
            debugInfo.append("-----------------------------------\n");

            // Perform withdrawal
            if (targetAccount instanceof CheckingAccount ca) {
                if (amount > targetAccount.getBalance() + ca.getOverdraftAmount()) {
                    debugInfo.append("Withdrawal failed!\n");
                    debugInfo.append("Error: Insufficient funds (including overdraft protection)");
                } else {
                    targetAccount.withdraw(amount);
                    debugInfo.append("Withdrawal successful!\n");
                    debugInfo.append("New Balance: $").append(String.format("%.2f", targetAccount.getBalance()));
                }
            } else {
                if (amount > targetAccount.getBalance()) {
                    debugInfo.append("Withdrawal failed!\n");
                    debugInfo.append("Error: Insufficient funds");
                } else {
                    targetAccount.withdraw(amount);
                    debugInfo.append("Withdrawal successful!\n");
                    debugInfo.append("New Balance: $").append(String.format("%.2f", targetAccount.getBalance()));
                }
            }
            
            jTextArea1.setText(debugInfo.toString());
            
        } catch (NumberFormatException ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid amount. Please enter a positive number.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            System.getLogger(main.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        int selectedCustomerIndex = jComboBox1.getSelectedIndex();
        if (selectedCustomerIndex < 0) return;

        Customer customer = customers.get(selectedCustomerIndex);
        String selectedType = (String) jComboBox2.getSelectedItem();
        
        StringBuilder info = new StringBuilder();
        info.append("Accounts of type ").append(selectedType).append(":\n");
        info.append("-----------------------------------\n");
        
        boolean found = false;
        for (int i = 0; i < customer.getNumberOfAccounts(); i++) {
            Account account = customer.getAccount(i);
            if ((selectedType.equals("Saving") && account instanceof SavingsAccount) ||
                (selectedType.equals("Checking") && account instanceof CheckingAccount)) {
                found = true;
                info.append("Account #").append(i).append(": ");
                switch (account) {
                    case SavingsAccount sa -> info.append("Balance: $").append(String.format("%.2f", sa.getBalance()))
                            .append(", Interest Rate: ").append(String.format("%.0f", sa.getInterestRate() * 100)).append("%");
                    case CheckingAccount ca -> info.append("Balance: $").append(String.format("%.2f", ca.getBalance()))
                            .append(", Overdraft: $").append(String.format("%.2f", ca.getOverdraftAmount()));
                    default -> {
                    }
                }
                info.append("\n");
            }
        }
        
        if (!found) {
            info.append("No accounts of this type found.");
        }
        
        jTextArea1.setText(info.toString());
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new main().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
